n = 500
x = seq(1, n)
y = 2*x + rnorm(n=n, sd=10)
#compute the estimation of beta
reg = lm(y~x)
?lm
#plot the relationship between x and y
library(ggplot2)
library(ggpubr)
library(rgl)
install.packages("rgl")
library(rgl)
#create the data
n = 500
x1 = rnorm(n=n, sd=5)
x2 = rnorm(n=n, sd=5)
y = -2*x1 + 3*x2 + rnorm(n=n, sd=5)
data = data.frame(x1,x2,y)
View(data)
X = as.matrix(data$x1, data$x2)
y = as.matrix(data$y)
beta_est = solve((t(X) %*% X)) %*% t(X) %*% y
reg = lm(data$x1~data$x2)
residuals = reg$residuals
reg = lm(data$y ~ data$x1 + data$x2)
beta1 = reg$coefficients[1]
beta1 = reg$coefficients[2]
#compute beta from regressing y and the residuals above
reg = lm(data$y ~ residuals)
beta1_2 = reg$coefficients[1]
beta1_2 = reg$coefficients
beta1_2 = reg$coefficients[2]
rm(list=ls())
data("iris")
library(corrplot)
?corrplot
<br>
<br>
n = 150
a = rnorm(mean=100, sd=15, n=n)
b = -3*x + rnorm(n=n, sd=15)
n = 150
a = rnorm(mean=100, sd=15, n=n)
b = -3*a + rnorm(n=n, sd=15)
c = 3*a + rnorm(n=n, sd=15)
d = rnorm(mean=100, sd=15, n=n)
e = -2*a + 3*z + rnorm(n=n, sd=15)
n = 150
a = rnorm(mean=100, sd=15, n=n)
b = -3*a + rnorm(n=n, sd=15)
c = 3*a + rnorm(n=n, sd=15)
d = rnorm(mean=100, sd=15, n=n)
e = -2*a + 3*d + rnorm(n=n, sd=15)
f = -4*e + 2*c + rnorm(n=n, sd=15)
data = data.frame(a,b,c,d,e,f)
library(FactoMineR)
#sample with linear relationship between x and y
n = 300
education = seq(1, n)
income = 3*education + rnorm(n=n, sd=45)
data1 = data.frame(education,income)
#plot relationship in order to make it more intuitive
library(ggplot2)
ggplot(data1, aes(x=education, y=income)) + geom_point(col="blue")
library(ggplot2)
ggplot(data1, aes(x=education, y=income)) + geom_point(col="blue") +
geom_abline(intercept = 0, slope = 3)
send_survey = function(n){
education = rnorm(mean = 6, sd = 2, n=n)
income = 1000 + 500*education + rnorm(n=n, sd=400)
education = round(education, 1)
data = data.frame(education,income)
return(data)
}
send_survey(10)
# the survey result are store in a object called "data"
n = 1000
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
cat("Beta0 estimation =", beta[2],
"\nBeta1 estimation =", beta[1])
ggplot(data, aes(x=education, y=income)) + geom_point(col="purple") +
geom_abline(intercept = beta[2], slope = beta[1])
#create a function that computes beta for a given sample size
compute_beta = function(n, index=1){
# the survey result are store in a object called "data"
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
return(beta[index])
}
#create the data frame to plot
beta = c()
sample_size = c()
for (i in seq(10, 2000)){
beta = append(beta, compute_beta(i))
sample_size = append(sample_size, i)
}
data = as.data.frame(cbind(beta, sample_size))
#plot result
library(ggplot2)
ggplot(data, aes(x=sample_size, y=beta)) + geom_point(col="red")
cat("Average value of beta1 estimation based on almost 2000 different samples:", mean(data$beta))
compute_beta = function(n, index=1){
# the survey result are store in a object called "data"
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
return(beta[index])
}
#compute 200 beta with 4 different sample size (50, 150, 500 and 1500)
sample_of_50 = c()
sample_of_150 = c()
sample_of_500 = c()
sample_of_1500 = c()
for (i in seq(1,200)){
sample_of_50 = append(sample_of_50, compute_beta(50))
sample_of_150 = append(sample_of_150, compute_beta(150))
sample_of_500 = append(sample_of_500, compute_beta(500))
sample_of_1500 = append(sample_of_1500, compute_beta(1500))
}
data = data.frame(sample_of_50, sample_of_150, sample_of_500, sample_of_1500)
#plot the distribution
library(ggplot2)
library(ggpubr)
plot1 = ggplot(data, aes(x=sample_of_50)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8) + xlim(400,600)
plot2 = ggplot(data, aes(x=sample_of_150)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8) + xlim(400,600)
plot3 = ggplot(data, aes(x=sample_of_500)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8) + xlim(400,600)
plot4 = ggplot(data, aes(x=sample_of_1500)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8) + xlim(400,600)
ggarrange(plot1, plot2, plot3, plot4)
generate_data = function(n){
x = rnorm(mean = 100, sd = 20, n=n)
y = rnorm(mean = 20, sd = 100, n=n)
data = data.frame(x, y)
return(data)
}
sample_of_50 = rnorm(100, mean=1)
sample_of_150 = rnorm(100, mean=2)
sample_of_500 = rnorm(100, mean=3)
data = data.frame(sample_of_50, sample_of_150, sample_of_500, sample_of_1500)
#plot the distribution
library(ggplot2)
library(ggpubr)
plot1 = ggplot(data, aes(x=sample_of_50)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
plot2 = ggplot(data, aes(x=sample_of_150)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
plot3 = ggplot(data, aes(x=sample_of_500)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
ggarrange(plot1, plot2, plot3)
