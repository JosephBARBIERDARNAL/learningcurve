return(rP)
}
generate(100)
a = list()
b = list()
for (i in rep(10:500)){
b = append(b, generate(i))
a = append(a, i)
}
plot(a, b, pch=2)
generate = function(sample_size){
x = rnorm(n=sample_size, sd=15)
y = 1.001*x + rnorm(n=sample_size, sd=30)
plot(x,y)
r = cor.test(x,y)
p = r$p.value
rP = r$estimate
return(p)
}
generate(100)
a = list()
b = list()
for (i in rep(10:500)){
b = append(b, generate(i))
a = append(a, i)
}
plot(a, b, pch=2)
4.39+4.48+2.886+2.061+1.919+2.839+3.86+3.638+3.549+4.036+4.276+5.063
ajac = c(7.7, 8.7, 10.5, 12.6, 15.9, 19.8, 22, 22.2, 20.3, 16.3, 11.8, 8.7)
cp1 = c(0.329, 0.330, 0.272, 0.226, 0.197, 0.235, 0.269, 0.279, 0.299, 0.325, 0.326, 0.335)
ajac %*% t(cp1)
t(ajac) %*% cp1
ajac = c(3.86, 4.02, 2.49, 1.83, 1.65, 2.19, 2.39, 2.88, 3.53, 4.16, 4.05, 4.02)
t(ajac) %*% cp1
sqrt(4.93)*0.908
sqrt(2.061)*0.0.963
sqrt(2.061)*0.963
((1/36)*11.048^2)/37.567
#sample with linear relationship between x and y
n = 300
x1 = seq(1, n)
y1 = 3*x1 + rnorm(n=n, sd=45)
data1 = data.frame(x1,y1)
#plot relationship in order to make it more intuitive
library(ggplot2)
plot1 = ggplot(data1, aes(x=x1, y=y1)) + geom_point(col="blue")
rep(0, 10, 0.1)
rep(0, 10, 0.1)
rep(0:10)
rep(0:10, 0.1)
rep?
?rep
seq(1, 10, 0.1)
seq(0, 10, 0.1)
seq(0, 10, 1/n)
seq(0, 10, 10/n)
seq(0, 10, n/1000)
?rep
c(1,1,1) + 5
data$education
send_survey = function(n){
education = rnorm(mean = 6, sd = 2, n=n)
income = 1000 + 500*education + rnorm(n=n, sd=400)
data = data.frame(education,income)
#ggplot(data, aes(x=education, y=income)) + geom_point(col="purple")
}
View(data)
# the survey result are store in a object called "data"
n = 1000
rep(1, times=n)
# the survey result are store in a object called "data"
n = 1000
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
beta
beta[1]
beta[2]
rm(list=ls())
#sample1
n = 300
x1 = seq(1, n)
y1 = 2*x1 + rnorm(n=n, sd=18)
data1 = data.frame(cbind(x1, y1))
#sample2
n = 300
x2 = seq(1, n)
y2 = rnorm(n=n, sd=50)
data2 = data.frame(cbind(x2, y2))
#plot both relationship in order to make it more intuitive
library(ggplot2)
plot1 = ggplot(data1, aes(x=x1, y=y1)) + geom_point(col="green")
plot2 = ggplot(data2, aes(x=x2, y=y2)) + geom_point(col="purple")
library(ggpubr)
ggarrange(plot1, plot2)
#sample1
n = 100
x1 = seq(1, n)
y1 = -2*x1 + rnorm(n=n, sd=18)
cat("Correlation between variables from our first sample: r =", cor(x1,y1))
#sample2
n = 100
x2 = seq(1, n)
y2 = rnorm(n=n, sd=5)
cat("Correlation between variables from second first sample: r =", cor(x2,y2))
#sample with linear relationship between x and y
n = 300
x1 = seq(1, n)
y1 = 3*x1 + rnorm(n=n, sd=45)
data1 = data.frame(x1,y1)
#sample with logarithmic relationship between x and y
n = 300
x2 = seq(1, n)
y2 = log(x2) + rnorm(n=n, sd=0.3)
data2 = data.frame(x2,y2)
#plot both relationship in order to make it more intuitive
library(ggplot2)
plot1 = ggplot(data1, aes(x=x1, y=y1)) + geom_point(col="blue")
plot2 = ggplot(data2, aes(x=x2, y=y2)) + geom_point(col="red")
library(ggpubr)
ggarrange(plot1, plot2)
#sample with linear relationship between x and y
n = 300
education = seq(1, n)
income = 3*education + rnorm(n=n, sd=45)
data1 = data.frame(education,income)
#plot relationship in order to make it more intuitive
library(ggplot2)
ggplot(data1, aes(x=education, y=income)) + geom_point(col="blue")
send_survey = function(n){
education = rnorm(mean = 6, sd = 2, n=n)
income = 1000 + 500*education + rnorm(n=n, sd=400)
education = round(education, 1)
data = data.frame(education,income)
return(data)
}
send_survey(10)
# the survey result are store in a object called "data"
n = 1000
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
cat("Beta0 estimation =", beta[2],
"\nBeta1 estimation =", beta[1])
ggplot(data, aes(x=education, y=income)) + geom_point(col="purple") +
geom_abline(intercept = beta[2], slope = beta[1])
#create a function that computes beta for a given sample size
compute_beta = function(n, index=1){
# the survey result are store in a object called "data"
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
return(beta[index])
}
#create the data frame to plot
beta = list()
sample_size = list()
for (i in seq(10, 200)){
beta = append(beta, compute_beta(i))
sample_size = append(sample_size, i)
}
data = as.data.frame(cbind(beta, sample_size))
#plot result
library(ggplot2)
ggplot(data, aes(x=sample_size, y=beta)) + geom_point(col="red")
seq(10, 200)
View(data)
#create the data frame to plot
beta = list()
sample_size = list()
for (i in seq(10, 500)){
beta = append(beta, compute_beta(i))
sample_size = append(sample_size, i)
}
data = as.data.frame(cbind(beta, sample_size))
#plot result
library(ggplot2)
ggplot(data, aes(x=sample_size, y=beta)) + geom_point(col="red")
str(data)
#create the data frame to plot
beta = c()
sample_size = c()
for (i in seq(10, 500)){
beta = append(beta, compute_beta(i))
sample_size = append(sample_size, i)
}
data = as.data.frame(cbind(beta, sample_size))
#plot result
library(ggplot2)
ggplot(data, aes(x=sample_size, y=beta)) + geom_point(col="red")
cat("Average value of beta1 based on 2000 different sample:", mean(data$beta))
cat("Average value of beta1 estimation based on almost 2000 different samples:", mean(data$beta))
cat("Average value of beta1 estimation based on almost 2000 different samples:", mean(data$beta))
cat("Average value of beta1 estimation based on almost 2000 different samples:", mean(data$beta))
cat("Average value of beta1 estimation based on almost 2000 different samples:", mean(data$beta))
generate_data = function(n){
x = rnorm(mean = 100, sd = 20)
y = rnorm(mean = 20, sd = 100)
data = cbind(x, y)
return(data)
}
data = generate_data(100)
generate_data = function(n){
x = rnorm(mean = 100, sd = 20, n=n)
y = rnorm(mean = 20, sd = 100, n=n)
data = cbind(x, y)
return(data)
}
data = generate_data(100)
View(data)
generate_data = function(n){
x = rnorm(mean = 100, sd = 20, n=n)
y = rnorm(mean = 20, sd = 100, n=n)
data = as.data.frame(x, y)
return(data)
}
data = generate_data(100)
View(data)
generate_data = function(n){
x = rnorm(mean = 100, sd = 20, n=n)
y = rnorm(mean = 20, sd = 100, n=n)
data = data.frame(x, y)
return(data)
}
data = generate_data(100)
plot(data$x, data$y)
data = generate_data(1000)
plot(data$x, data$y)
compute_beta = function(n, index=1){
# the survey result are store in a object called "data"
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
return(beta[index])
}
#compute 200 beta with 3 different sample size (50, 150 and 500)
sample1 = c()
sample2 = c()
sample3 = c()
for (i in seq(1,200)){
sample1 = append(sample1, compute_beta(50))
sample2 = append(sample2, compute_beta(150))
sample3 = append(sample3, compute_beta(500))
}
data = data.frame(sample1, sample2, sample3)
#plot the distribution
library(ggplot2)
#plot1 = ggplot(data, aes(x=sample1)) + geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
View(data)
sample_of_50 = rep(compute_beta(50), 200)
compute_beta = function(n, index=1){
# the survey result are store in a object called "data"
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
return(beta[index])
}
#compute 200 beta with 4 different sample size (50, 150, 500 and 1500)
sample_of_50 = c()
sample_of_150 = c()
sample_of_500 = c()
sample_of_1500 = c()
for (i in seq(1,200)){
#sample_of_50 = append(sample_of_50, compute_beta(50))
sample_of_150 = append(sample_of_150, compute_beta(150))
sample_of_500 = append(sample_of_500, compute_beta(500))
sample_of_1500 = append(sample_of_1500, compute_beta(1500))
}
data = data.frame(sample_of_50, sample_of_150, sample_of_500, sample_of_1500)
sample_of_50 = rep(compute_beta(50), 199)
compute_beta = function(n, index=1){
# the survey result are store in a object called "data"
data = send_survey(n)
#define X and y
X = cbind(data$education, rep(1, times=n)) #add a column of 1 because we use matrix product
y = data$income
#compute beta
beta = solve((t(X) %*% X)) %*% t(X) %*% y
return(beta[index])
}
#compute 200 beta with 4 different sample size (50, 150, 500 and 1500)
sample_of_50 = c()
sample_of_150 = c()
sample_of_500 = c()
sample_of_1500 = c()
for (i in seq(1,200)){
#sample_of_50 = append(sample_of_50, compute_beta(50))
sample_of_150 = append(sample_of_150, compute_beta(150))
sample_of_500 = append(sample_of_500, compute_beta(500))
sample_of_1500 = append(sample_of_1500, compute_beta(1500))
}
data = data.frame(sample_of_50, sample_of_150, sample_of_500, sample_of_1500)
length(sample_of_500)
length(sample_of_50)
sample_of_50 = rep(compute_beta(50), 200)
?ggarrange
library(ggpubr)
?ggarrange
n = 150
sd = 300
a = rnorm(mean=100, sd=3*sd, n=n)
b = -3*a + rnorm(n=n, sd=10*sd)
c = 3*a + rnorm(n=n, sd=2*sd)
d = rnorm(mean=100, sd=sd, n=n)
e = -2*a + 3*d + rnorm(n=n, sd=12*sd)
f = -4*e + 2*c + rnorm(n=n, sd=sd)
data = data.frame(a,b,c,d,e,f)
library(FactoMineR)
results = PCA(data, graph = FALSE)
library(factoextra)
fviz_pca_var(results, axes = c(1,2),
col.var = "cos2",
gradient.cols = c("blue", "orange", "red"),
repel = TRUE)
results$eig
n = 150
sd = 300
set.seed(1)
a = rnorm(mean=100, sd=3*sd, n=n)
b = -3*a + rnorm(n=n, sd=10*sd)
c = 3*a + rnorm(n=n, sd=2*sd)
d = rnorm(mean=100, sd=sd, n=n)
e = -2*a + 3*d + rnorm(n=n, sd=12*sd)
f = -4*e + 2*c + rnorm(n=n, sd=sd)
data = data.frame(a,b,c,d,e,f)
library(FactoMineR)
results = PCA(data, graph = FALSE)
library(factoextra)
fviz_pca_var(results, axes = c(1,2),
col.var = "cos2",
gradient.cols = c("blue", "orange", "red"),
repel = TRUE)
results$eig
results$eig[1:2]
all_eig = results$eig[1:6]
results$eig[1:6]
results$var$contrib
library(corrplot)
corrplot(contribution)
contribution = results$var$contrib
corrplot(contribution)
corrplot(contribution, is.corr = FALSE)
library("FactoMineR")
description = dimdesc(results, proba = 0.05)
description$Dim.1
description$Dim.1$quanti
description$Dim.2
results$ind$cos2
results$ind$cos2[1]
results$ind$cos2[,1]
results$ind$cos2#[,1]
results$ind$cos2[,1]
sum(results$ind$cos2[,1])
results$ind$cos2[1,1]
results$ind$cos2[1,1] + results$ind$cos2[1,2]
?plot.PCA
data("iris")
library(FactoMineR)
result = PCA(iris[, 1:4], graph = FALSE)
library(factoextra)
library(FactoMineR)
data("iris")
result = PCA(iris, graph = FALSE)
result = PCA(iris[, 1:4], graph = FALSE)
result$eig
result$eig
result = PCA(iris[, 1:4], graph = FALSE, scale.unit = FALSE)
result$eig
data("mtcars")
library(FactoMineR)
library(factoextra)
data = mtcars[, c(1:7, 10:11)]
?plot.PCA
library(factoextra)
fviz_cos2(results)
?fviz_cos2
?fviz_pca_ind
max(results$ind$cos2[,1]) #+ results$ind$cos2[1,2]
results$ind$cos2[1,1] + results$ind$cos2[1,2] + results$ind$cos2[1,3] + results$ind$cos2[1,4]
results$ind$cos2[1,1] + results$ind$cos2[1,2] + results$ind$cos2[1,3] + results$ind$cos2[1,4] + results$ind$cos2[1,5]
fviz_pca_ind(results, col.ind="cos2",
gradient.cols = c("blue", "purple", "red"),
repel = TRUE)
data("iris")
library(FactoMineR)
library(factoextra)
results = PCA(iris[, 1:4], graph = FALSE)
fviz_pca_ind(results, axes = c(1,2),
col.ind = iris$Species,
legend.title = "Iris species")
fviz_pca_ind(results, col.ind="cos2",
gradient.cols = c("blue", "purple", "red"),
repel = TRUE)
alaska = c(634892, -1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
N = diag(len)
t(alaska) %*% axe1
alaska = c(634892, -1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
N = diag(len)
t(alaska) %*% 1/len %*% axe1
alaska = c(634892, -1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
N = diag(len)
t(alaska) %*% N %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
N = diag(len)
t(alaska) %*% 1/len %*% axe1
t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
N = diag(len)
1/len * t(alaska) %*% axe1
len
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
t(alaska) %*% 1/len*axe1
t(alaska) %*% (1/len)*axe1
t(alaska) %*% axe1
alaska = scale(c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05))
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
t(alaska) %*% axe1
?scale
alaska = scale(c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05), scale = FALSE)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
t(alaska) %*% axe1
1/len * t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.161, -0.529, 0.417, 0.748, -0.883, 0.935, -0.935)
len = length(alaska)
1/len * t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
len = length(alaska)
1/len * t(alaska) %*% axe1
t(alaska) %*% axe1
t(alaska) %*% axe1*1/7
alaska = scale(c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05))
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
len = length(alaska)
t(alaska) %*% axe1*1/7
t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
n * t(alaska) %*% axe1
t(alaska)
axe1
alaska = scale(c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05))
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
n * t(alaska) %*% axe1
t(alaska) %*% axe1
alaska = scale(c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05), scale = FALSE)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
n * t(alaska) %*% axe1
ajac = c(3.86, 4.02, 2.49, 1.83, 1.65, 2.19, 2.39, 2.88, 3.53, 4.16, 4.05, 4.02)
cp1 = c(0.329, 0.330, 0.272, 0.226, 0.197, 0.235, 0.269, 0.279, 0.299, 0.325, 0.326, 0.335)
t(ajac) %*% cp1 = 11.048
t(ajac) %*% cp1
t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
t(alaska) %*% axe1
n* t(alaska) %*% axe1
alaska = c(-1.72, -0.24, 2.09, 15.95, 4.64, 941.95, 58.05)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
n* t(alaska) %*% axe1
alaska = c((-1.72-0.246)/6.911, (-0.24+0.044)/0.056, (2.09-2.53)/1.891, (15.95-13.864)/1.736,
(4.64-8.733)/1.389, (941.95-874.833)/18.494, (58.05-125.117)/18.494)
axe1 = c(0.085, -0.280, 0.221, 0.396, -0.468, 0.495, -0.495)
n = 1/51
n* t(alaska) %*% axe1
t(alaska) %*% axe1
